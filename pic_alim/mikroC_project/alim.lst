;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 21/09/13 17:38:39
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF002EFDC  	GOTO        1464
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF002EF79  	GOTO        1266
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xF003EF60  	GOTO        1728
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x001C	0x0E75      	MOVLW       117
0x001E	0x6E0D      	MOVWF       R13, 0
L_Delay_22us2:
0x0020	0x2E0D      	DECFSZ      R13, 1, 0
0x0022	0xD7FE      	BRA         L_Delay_22us2
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x0024	0x0012      	RETURN      0
; end of _Delay_22us
_ADC_Get_Sample:
;__Lib_ADC_A_D.c,34 :: 		
;__Lib_ADC_A_D.c,37 :: 		
0x0026	0x0E83      	MOVLW       131
0x0028	0x16C2      	ANDWF       ADCON0, 1 
;__Lib_ADC_A_D.c,39 :: 		
0x002A	0xF000C056  	MOVFF       FARG_ADC_Get_Sample_channel, R0
0x002E	0x3600      	RLCF        R0, 1 
0x0030	0x9000      	BCF         R0, 0 
0x0032	0x3600      	RLCF        R0, 1 
0x0034	0x9000      	BCF         R0, 0 
0x0036	0x5000      	MOVF        R0, 0 
0x0038	0x12C2      	IORWF       ADCON0, 1 
;__Lib_ADC_A_D.c,41 :: 		
0x003A	0xDFF0      	RCALL       _Delay_22us
;__Lib_ADC_A_D.c,42 :: 		
0x003C	0x82C2      	BSF         ADCON0, 1 
;__Lib_ADC_A_D.c,43 :: 		
L_ADC_Get_Sample0:
0x003E	0xA2C2      	BTFSS       ADCON0, 1 
0x0040	0xD001      	BRA         L_ADC_Get_Sample1
;__Lib_ADC_A_D.c,44 :: 		
0x0042	0xD7FD      	BRA         L_ADC_Get_Sample0
L_ADC_Get_Sample1:
;__Lib_ADC_A_D.c,45 :: 		
0x0044	0xF001CFC4  	MOVFF       ADRESH, R1
0x0048	0x6A00      	CLRF        R0 
;__Lib_ADC_A_D.c,46 :: 		
0x004A	0x50C3      	MOVF        ADRESL, 0 
0x004C	0x1200      	IORWF       R0, 1 
0x004E	0x0E00      	MOVLW       0
0x0050	0x1201      	IORWF       R1, 1 
;__Lib_ADC_A_D.c,48 :: 		
;__Lib_ADC_A_D.c,49 :: 		
L_end_ADC_Get_Sample:
0x0052	0x0012      	RETURN      0
; end of _ADC_Get_Sample
_i2c_read_data_from_buffer:
;i2c.c,10 :: 		void i2c_read_data_from_buffer(){
;i2c.c,11 :: 		short i = 0;
0x0054	0x6A55      	CLRF        i2c_read_data_from_buffer_i_L0 
;i2c.c,13 :: 		for(i=0; i<(nb_rx_octet-1); i++){
0x0056	0x6A55      	CLRF        i2c_read_data_from_buffer_i_L0 
L_i2c_read_data_from_buffer0:
0x0058	0x0434      	DECF        _nb_rx_octet, 0 
0x005A	0x6E01      	MOVWF       R1 
0x005C	0x6A02      	CLRF        R2 
0x005E	0x0E00      	MOVLW       0
0x0060	0x5A02      	SUBWFB      R2, 1 
0x0062	0x0E80      	MOVLW       128
0x0064	0xBE55      	BTFSC       i2c_read_data_from_buffer_i_L0, 7 
0x0066	0x0E7F      	MOVLW       127
0x0068	0x6E00      	MOVWF       R0 
0x006A	0x0E80      	MOVLW       128
0x006C	0x1802      	XORWF       R2, 0 
0x006E	0x5C00      	SUBWF       R0, 0 
0x0070	0xE102      	BNZ         L__i2c_read_data_from_buffer54
0x0072	0x5001      	MOVF        R1, 0 
0x0074	0x5C55      	SUBWF       i2c_read_data_from_buffer_i_L0, 0 
L__i2c_read_data_from_buffer54:
0x0076	0xB0D8      	BTFSC       STATUS, 0 
0x0078	0xD0C2      	BRA         L_i2c_read_data_from_buffer1
;i2c.c,14 :: 		switch(rxbuffer_tab[0]+i){
0x007A	0x5055      	MOVF        i2c_read_data_from_buffer_i_L0, 0 
0x007C	0x2448      	ADDWF       _rxbuffer_tab, 0 
0x007E	0x6E04      	MOVWF       R4 
0x0080	0x6A05      	CLRF        R5 
0x0082	0x0E00      	MOVLW       0
0x0084	0xBE55      	BTFSC       i2c_read_data_from_buffer_i_L0, 7 
0x0086	0x0EFF      	MOVLW       255
0x0088	0x2205      	ADDWFC      R5, 1 
0x008A	0xD091      	BRA         L_i2c_read_data_from_buffer3
;i2c.c,15 :: 		case 0x00:  // alimentation
L_i2c_read_data_from_buffer5:
;i2c.c,16 :: 		switch(rxbuffer_tab[i+1]){
0x008C	0x5055      	MOVF        i2c_read_data_from_buffer_i_L0, 0 
0x008E	0x0F01      	ADDLW       1
0x0090	0x6E00      	MOVWF       R0 
0x0092	0x6A01      	CLRF        R1 
0x0094	0x0E00      	MOVLW       0
0x0096	0xBE55      	BTFSC       i2c_read_data_from_buffer_i_L0, 7 
0x0098	0x0EFF      	MOVLW       255
0x009A	0x2201      	ADDWFC      R1, 1 
0x009C	0x0E48      	MOVLW       _rxbuffer_tab
0x009E	0x2400      	ADDWF       R0, 0 
0x00A0	0x6E02      	MOVWF       R2 
0x00A2	0x0E00      	MOVLW       hi_addr(_rxbuffer_tab)
0x00A4	0x2001      	ADDWFC      R1, 0 
0x00A6	0x6E03      	MOVWF       R3 
0x00A8	0xD00B      	BRA         L_i2c_read_data_from_buffer6
;i2c.c,17 :: 		case 0x01:
L_i2c_read_data_from_buffer8:
;i2c.c,18 :: 		state = POWER_ON;
0x00AA	0x0E01      	MOVLW       1
0x00AC	0x6E2A      	MOVWF       _state 
;i2c.c,19 :: 		break;
0x00AE	0xD01B      	BRA         L_i2c_read_data_from_buffer7
;i2c.c,20 :: 		case 0x02:
L_i2c_read_data_from_buffer9:
;i2c.c,21 :: 		time_to_stop = default_time_to_stop;  // Go to Sleep mode
0x00B0	0xF024C025  	MOVFF       _default_time_to_stop, _time_to_stop
;i2c.c,22 :: 		start_time_to_stop = 1;
0x00B4	0x0E01      	MOVLW       1
0x00B6	0x6E20      	MOVWF       _start_time_to_stop 
;i2c.c,23 :: 		state = WAIT_TO_SLEEP;
0x00B8	0x0E02      	MOVLW       2
0x00BA	0x6E2A      	MOVWF       _state 
;i2c.c,24 :: 		break;
0x00BC	0xD014      	BRA         L_i2c_read_data_from_buffer7
;i2c.c,25 :: 		default:
L_i2c_read_data_from_buffer10:
;i2c.c,26 :: 		break;
0x00BE	0xD013      	BRA         L_i2c_read_data_from_buffer7
;i2c.c,27 :: 		}
L_i2c_read_data_from_buffer6:
0x00C0	0xFFE9C002  	MOVFF       R2, FSR0L
0x00C4	0xFFEAC003  	MOVFF       R3, FSR0H
0x00C8	0xF001CFEE  	MOVFF       POSTINC0, R1
0x00CC	0x5001      	MOVF        R1, 0 
0x00CE	0x0A01      	XORLW       1
0x00D0	0xE0EC      	BZ          L_i2c_read_data_from_buffer8
0x00D2	0xFFE9C002  	MOVFF       R2, FSR0L
0x00D6	0xFFEAC003  	MOVFF       R3, FSR0H
0x00DA	0xF001CFEE  	MOVFF       POSTINC0, R1
0x00DE	0x5001      	MOVF        R1, 0 
0x00E0	0x0A02      	XORLW       2
0x00E2	0xE0E6      	BZ          L_i2c_read_data_from_buffer9
0x00E4	0xD7EC      	BRA         L_i2c_read_data_from_buffer10
L_i2c_read_data_from_buffer7:
;i2c.c,28 :: 		i++;
0x00E6	0x2A55      	INCF        i2c_read_data_from_buffer_i_L0, 1 
;i2c.c,29 :: 		break;
0x00E8	0xD088      	BRA         L_i2c_read_data_from_buffer4
;i2c.c,30 :: 		case 0x03:
L_i2c_read_data_from_buffer11:
;i2c.c,31 :: 		default_time_to_start[0] = rxbuffer_tab[i+1]; // hours
0x00EA	0x5055      	MOVF        i2c_read_data_from_buffer_i_L0, 0 
0x00EC	0x0F01      	ADDLW       1
0x00EE	0x6E00      	MOVWF       R0 
0x00F0	0x6A01      	CLRF        R1 
0x00F2	0x0E00      	MOVLW       0
0x00F4	0xBE55      	BTFSC       i2c_read_data_from_buffer_i_L0, 7 
0x00F6	0x0EFF      	MOVLW       255
0x00F8	0x2201      	ADDWFC      R1, 1 
0x00FA	0x0E48      	MOVLW       _rxbuffer_tab
0x00FC	0x2400      	ADDWF       R0, 0 
0x00FE	0x6EE9      	MOVWF       FSR0L 
0x0100	0x0E00      	MOVLW       hi_addr(_rxbuffer_tab)
0x0102	0x2001      	ADDWFC      R1, 0 
0x0104	0x6EEA      	MOVWF       FSR0L+1 
0x0106	0xF000CFEE  	MOVFF       POSTINC0, R0
0x010A	0xF021C000  	MOVFF       R0, _default_time_to_start
;i2c.c,32 :: 		break;
0x010E	0xD075      	BRA         L_i2c_read_data_from_buffer4
;i2c.c,33 :: 		case 0x04:
L_i2c_read_data_from_buffer12:
;i2c.c,34 :: 		default_time_to_start[1] = rxbuffer_tab[i+1]; // min
0x0110	0x5055      	MOVF        i2c_read_data_from_buffer_i_L0, 0 
0x0112	0x0F01      	ADDLW       1
0x0114	0x6E00      	MOVWF       R0 
0x0116	0x6A01      	CLRF        R1 
0x0118	0x0E00      	MOVLW       0
0x011A	0xBE55      	BTFSC       i2c_read_data_from_buffer_i_L0, 7 
0x011C	0x0EFF      	MOVLW       255
0x011E	0x2201      	ADDWFC      R1, 1 
0x0120	0x0E48      	MOVLW       _rxbuffer_tab
0x0122	0x2400      	ADDWF       R0, 0 
0x0124	0x6EE9      	MOVWF       FSR0L 
0x0126	0x0E00      	MOVLW       hi_addr(_rxbuffer_tab)
0x0128	0x2001      	ADDWFC      R1, 0 
0x012A	0x6EEA      	MOVWF       FSR0L+1 
0x012C	0xF000CFEE  	MOVFF       POSTINC0, R0
0x0130	0xF022C000  	MOVFF       R0, _default_time_to_start+1
;i2c.c,35 :: 		break;
0x0134	0xD062      	BRA         L_i2c_read_data_from_buffer4
;i2c.c,36 :: 		case 0x05:
L_i2c_read_data_from_buffer13:
;i2c.c,37 :: 		default_time_to_start[2] = rxbuffer_tab[i+1]; // sec
0x0136	0x5055      	MOVF        i2c_read_data_from_buffer_i_L0, 0 
0x0138	0x0F01      	ADDLW       1
0x013A	0x6E00      	MOVWF       R0 
0x013C	0x6A01      	CLRF        R1 
0x013E	0x0E00      	MOVLW       0
0x0140	0xBE55      	BTFSC       i2c_read_data_from_buffer_i_L0, 7 
0x0142	0x0EFF      	MOVLW       255
0x0144	0x2201      	ADDWFC      R1, 1 
0x0146	0x0E48      	MOVLW       _rxbuffer_tab
0x0148	0x2400      	ADDWF       R0, 0 
0x014A	0x6EE9      	MOVWF       FSR0L 
0x014C	0x0E00      	MOVLW       hi_addr(_rxbuffer_tab)
0x014E	0x2001      	ADDWFC      R1, 0 
0x0150	0x6EEA      	MOVWF       FSR0L+1 
0x0152	0xF000CFEE  	MOVFF       POSTINC0, R0
0x0156	0xF023C000  	MOVFF       R0, _default_time_to_start+2
;i2c.c,38 :: 		break;
0x015A	0xD04F      	BRA         L_i2c_read_data_from_buffer4
;i2c.c,39 :: 		case 0x06:
L_i2c_read_data_from_buffer14:
;i2c.c,40 :: 		default_time_to_stop = rxbuffer_tab[i+1]; // sec
0x015C	0x5055      	MOVF        i2c_read_data_from_buffer_i_L0, 0 
0x015E	0x0F01      	ADDLW       1
0x0160	0x6E00      	MOVWF       R0 
0x0162	0x6A01      	CLRF        R1 
0x0164	0x0E00      	MOVLW       0
0x0166	0xBE55      	BTFSC       i2c_read_data_from_buffer_i_L0, 7 
0x0168	0x0EFF      	MOVLW       255
0x016A	0x2201      	ADDWFC      R1, 1 
0x016C	0x0E48      	MOVLW       _rxbuffer_tab
0x016E	0x2400      	ADDWF       R0, 0 
0x0170	0x6EE9      	MOVWF       FSR0L 
0x0172	0x0E00      	MOVLW       hi_addr(_rxbuffer_tab)
0x0174	0x2001      	ADDWFC      R1, 0 
0x0176	0x6EEA      	MOVWF       FSR0L+1 
0x0178	0xF000CFEE  	MOVFF       POSTINC0, R0
0x017C	0xF025C000  	MOVFF       R0, _default_time_to_stop
;i2c.c,41 :: 		break;
0x0180	0xD03C      	BRA         L_i2c_read_data_from_buffer4
;i2c.c,42 :: 		case 0x07:
L_i2c_read_data_from_buffer15:
;i2c.c,43 :: 		watchdog_restart_default = rxbuffer_tab[i+1];
0x0182	0x5055      	MOVF        i2c_read_data_from_buffer_i_L0, 0 
0x0184	0x0F01      	ADDLW       1
0x0186	0x6E00      	MOVWF       R0 
0x0188	0x6A01      	CLRF        R1 
0x018A	0x0E00      	MOVLW       0
0x018C	0xBE55      	BTFSC       i2c_read_data_from_buffer_i_L0, 7 
0x018E	0x0EFF      	MOVLW       255
0x0190	0x2201      	ADDWFC      R1, 1 
0x0192	0x0E48      	MOVLW       _rxbuffer_tab
0x0194	0x2400      	ADDWF       R0, 0 
0x0196	0x6EE9      	MOVWF       FSR0L 
0x0198	0x0E00      	MOVLW       hi_addr(_rxbuffer_tab)
0x019A	0x2001      	ADDWFC      R1, 0 
0x019C	0x6EEA      	MOVWF       FSR0L+1 
0x019E	0xF000CFEE  	MOVFF       POSTINC0, R0
0x01A2	0xF026C000  	MOVFF       R0, _watchdog_restart_default
;i2c.c,44 :: 		watchdog_restart = watchdog_restart_default;
0x01A6	0xF027C026  	MOVFF       _watchdog_restart_default, _watchdog_restart
;i2c.c,45 :: 		break;
0x01AA	0xD027      	BRA         L_i2c_read_data_from_buffer4
;i2c.c,46 :: 		default:
L_i2c_read_data_from_buffer16:
;i2c.c,47 :: 		break;
0x01AC	0xD026      	BRA         L_i2c_read_data_from_buffer4
;i2c.c,48 :: 		}
L_i2c_read_data_from_buffer3:
0x01AE	0x0E00      	MOVLW       0
0x01B0	0x1805      	XORWF       R5, 0 
0x01B2	0xE102      	BNZ         L__i2c_read_data_from_buffer55
0x01B4	0x0E00      	MOVLW       0
0x01B6	0x1804      	XORWF       R4, 0 
L__i2c_read_data_from_buffer55:
0x01B8	0xB4D8      	BTFSC       STATUS, 2 
0x01BA	0xD768      	BRA         L_i2c_read_data_from_buffer5
0x01BC	0x0E00      	MOVLW       0
0x01BE	0x1805      	XORWF       R5, 0 
0x01C0	0xE102      	BNZ         L__i2c_read_data_from_buffer56
0x01C2	0x0E03      	MOVLW       3
0x01C4	0x1804      	XORWF       R4, 0 
L__i2c_read_data_from_buffer56:
0x01C6	0xE091      	BZ          L_i2c_read_data_from_buffer11
0x01C8	0x0E00      	MOVLW       0
0x01CA	0x1805      	XORWF       R5, 0 
0x01CC	0xE102      	BNZ         L__i2c_read_data_from_buffer57
0x01CE	0x0E04      	MOVLW       4
0x01D0	0x1804      	XORWF       R4, 0 
L__i2c_read_data_from_buffer57:
0x01D2	0xE09E      	BZ          L_i2c_read_data_from_buffer12
0x01D4	0x0E00      	MOVLW       0
0x01D6	0x1805      	XORWF       R5, 0 
0x01D8	0xE102      	BNZ         L__i2c_read_data_from_buffer58
0x01DA	0x0E05      	MOVLW       5
0x01DC	0x1804      	XORWF       R4, 0 
L__i2c_read_data_from_buffer58:
0x01DE	0xE0AB      	BZ          L_i2c_read_data_from_buffer13
0x01E0	0x0E00      	MOVLW       0
0x01E2	0x1805      	XORWF       R5, 0 
0x01E4	0xE102      	BNZ         L__i2c_read_data_from_buffer59
0x01E6	0x0E06      	MOVLW       6
0x01E8	0x1804      	XORWF       R4, 0 
L__i2c_read_data_from_buffer59:
0x01EA	0xE0B8      	BZ          L_i2c_read_data_from_buffer14
0x01EC	0x0E00      	MOVLW       0
0x01EE	0x1805      	XORWF       R5, 0 
0x01F0	0xE102      	BNZ         L__i2c_read_data_from_buffer60
0x01F2	0x0E07      	MOVLW       7
0x01F4	0x1804      	XORWF       R4, 0 
L__i2c_read_data_from_buffer60:
0x01F6	0xE0C5      	BZ          L_i2c_read_data_from_buffer15
0x01F8	0xD7D9      	BRA         L_i2c_read_data_from_buffer16
L_i2c_read_data_from_buffer4:
;i2c.c,13 :: 		for(i=0; i<(nb_rx_octet-1); i++){
0x01FA	0x2A55      	INCF        i2c_read_data_from_buffer_i_L0, 1 
;i2c.c,49 :: 		}
0x01FC	0xD72D      	BRA         L_i2c_read_data_from_buffer0
L_i2c_read_data_from_buffer1:
;i2c.c,50 :: 		}
L_end_i2c_read_data_from_buffer:
0x01FE	0x0012      	RETURN      0
; end of _i2c_read_data_from_buffer
_ils_analysis:
;config.c,115 :: 		void ils_analysis(unsigned short new_state){
;config.c,116 :: 		if(ILS==0){ // Magnet detected
0x0200	0xB480      	BTFSC       PORTA, 2 
0x0202	0xD004      	BRA         L_ils_analysis0
;config.c,117 :: 		ils_cpt--;
0x0204	0x0629      	DECF        _ils_cpt, 1 
;config.c,118 :: 		set_led_on = 1;
0x0206	0x0E01      	MOVLW       1
0x0208	0x6E28      	MOVWF       _set_led_on 
;config.c,119 :: 		}
0x020A	0xD005      	BRA         L_ils_analysis1
L_ils_analysis0:
;config.c,121 :: 		ils_cpt = ILS_CPT_TIME;
0x020C	0x0E04      	MOVLW       4
0x020E	0x6E29      	MOVWF       _ils_cpt 
;config.c,122 :: 		set_led_on = 0;
0x0210	0x6A28      	CLRF        _set_led_on 
;config.c,123 :: 		ils_removed = 1;
0x0212	0x0E01      	MOVLW       1
0x0214	0x6E2B      	MOVWF       _ils_removed 
;config.c,124 :: 		}
L_ils_analysis1:
;config.c,126 :: 		if(ils_removed == 1 && ils_cpt == 0){
0x0216	0x502B      	MOVF        _ils_removed, 0 
0x0218	0x0A01      	XORLW       1
0x021A	0xE109      	BNZ         L_ils_analysis4
0x021C	0x5029      	MOVF        _ils_cpt, 0 
0x021E	0x0A00      	XORLW       0
0x0220	0xE106      	BNZ         L_ils_analysis4
L__ils_analysis5:
;config.c,127 :: 		ils_cpt = ILS_CPT_TIME;
0x0222	0x0E04      	MOVLW       4
0x0224	0x6E29      	MOVWF       _ils_cpt 
;config.c,128 :: 		state = new_state;
0x0226	0xF02AC055  	MOVFF       FARG_ils_analysis_new_state, _state
;config.c,129 :: 		ils_removed = 0;
0x022A	0x6A2B      	CLRF        _ils_removed 
;config.c,130 :: 		set_led_on = 0;
0x022C	0x6A28      	CLRF        _set_led_on 
;config.c,131 :: 		}
L_ils_analysis4:
;config.c,132 :: 		}
L_end_ils_analysis:
0x022E	0x0012      	RETURN      0
; end of _ils_analysis
_i2c_write_data_to_buffer:
;i2c.c,52 :: 		void i2c_write_data_to_buffer(const unsigned short nb_tx_octet){
;i2c.c,53 :: 		switch(rxbuffer_tab[0]+nb_tx_octet){
0x0230	0x5058      	MOVF        FARG_i2c_write_data_to_buffer_nb_tx_octet, 0 
0x0232	0x2448      	ADDWF       _rxbuffer_tab, 0 
0x0234	0x6E03      	MOVWF       R3 
0x0236	0x6A04      	CLRF        R4 
0x0238	0x0E00      	MOVLW       0
0x023A	0x2204      	ADDWFC      R4, 1 
0x023C	0xD052      	BRA         L_i2c_write_data_to_buffer17
;i2c.c,54 :: 		case 0x00:
L_i2c_write_data_to_buffer19:
;i2c.c,55 :: 		SSPBUF = battery_voltage[0];
0x023E	0xFFC9C02C  	MOVFF       _battery_voltage, SSPBUF
;i2c.c,56 :: 		break;
0x0242	0xD0C2      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,57 :: 		case 0x01:
L_i2c_write_data_to_buffer20:
;i2c.c,58 :: 		SSPBUF = battery_voltage[0] >> 8;
0x0244	0xF000C02D  	MOVFF       _battery_voltage+1, R0
0x0248	0x6A01      	CLRF        R1 
0x024A	0xFFC9C000  	MOVFF       R0, SSPBUF
;i2c.c,59 :: 		break;
0x024E	0xD0BC      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,60 :: 		case 0x02:
L_i2c_write_data_to_buffer21:
;i2c.c,61 :: 		SSPBUF = battery_voltage[1];
0x0250	0xFFC9C02E  	MOVFF       _battery_voltage+2, SSPBUF
;i2c.c,62 :: 		break;
0x0254	0xD0B9      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,63 :: 		case 0x03:
L_i2c_write_data_to_buffer22:
;i2c.c,64 :: 		SSPBUF = battery_voltage[1] >> 8;
0x0256	0xF000C02F  	MOVFF       _battery_voltage+3, R0
0x025A	0x6A01      	CLRF        R1 
0x025C	0xFFC9C000  	MOVFF       R0, SSPBUF
;i2c.c,65 :: 		break;
0x0260	0xD0B3      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,66 :: 		case 0x04:
L_i2c_write_data_to_buffer23:
;i2c.c,67 :: 		SSPBUF = battery_voltage[2];
0x0262	0xFFC9C030  	MOVFF       _battery_voltage+4, SSPBUF
;i2c.c,68 :: 		break;
0x0266	0xD0B0      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,69 :: 		case 0x05:
L_i2c_write_data_to_buffer24:
;i2c.c,70 :: 		SSPBUF = battery_voltage[2] >> 8;
0x0268	0xF000C031  	MOVFF       _battery_voltage+5, R0
0x026C	0x6A01      	CLRF        R1 
0x026E	0xFFC9C000  	MOVFF       R0, SSPBUF
;i2c.c,71 :: 		break;
0x0272	0xD0AA      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,72 :: 		case 0x06:
L_i2c_write_data_to_buffer25:
;i2c.c,73 :: 		SSPBUF = battery_voltage[3];
0x0274	0xFFC9C032  	MOVFF       _battery_voltage+6, SSPBUF
;i2c.c,74 :: 		break;
0x0278	0xD0A7      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,75 :: 		case 0x07:
L_i2c_write_data_to_buffer26:
;i2c.c,76 :: 		SSPBUF = battery_voltage[3] >> 8;
0x027A	0xF000C033  	MOVFF       _battery_voltage+7, R0
0x027E	0x6A01      	CLRF        R1 
0x0280	0xFFC9C000  	MOVFF       R0, SSPBUF
;i2c.c,77 :: 		break;
0x0284	0xD0A1      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,78 :: 		case 0x08:
L_i2c_write_data_to_buffer27:
;i2c.c,79 :: 		SSPBUF = power_current[0];
0x0286	0xFFC9C035  	MOVFF       _power_current, SSPBUF
;i2c.c,80 :: 		break;
0x028A	0xD09E      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,81 :: 		case 0x09:
L_i2c_write_data_to_buffer28:
;i2c.c,82 :: 		SSPBUF = power_current[0] >> 8;
0x028C	0xF000C036  	MOVFF       _power_current+1, R0
0x0290	0x6A01      	CLRF        R1 
0x0292	0xFFC9C000  	MOVFF       R0, SSPBUF
;i2c.c,83 :: 		break;
0x0296	0xD098      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,84 :: 		case 0x0A:
L_i2c_write_data_to_buffer29:
;i2c.c,85 :: 		SSPBUF = power_current[1];
0x0298	0xFFC9C037  	MOVFF       _power_current+2, SSPBUF
;i2c.c,86 :: 		break;
0x029C	0xD095      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,87 :: 		case 0x0B:
L_i2c_write_data_to_buffer30:
;i2c.c,88 :: 		SSPBUF = power_current[1] >> 8;
0x029E	0xF000C038  	MOVFF       _power_current+3, R0
0x02A2	0x6A01      	CLRF        R1 
0x02A4	0xFFC9C000  	MOVFF       R0, SSPBUF
;i2c.c,89 :: 		break;
0x02A8	0xD08F      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,90 :: 		case 0x0C:
L_i2c_write_data_to_buffer31:
;i2c.c,91 :: 		SSPBUF = power_current[2];
0x02AA	0xFFC9C039  	MOVFF       _power_current+4, SSPBUF
;i2c.c,92 :: 		break;
0x02AE	0xD08C      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,93 :: 		case 0x0D:
L_i2c_write_data_to_buffer32:
;i2c.c,94 :: 		SSPBUF = power_current[2] >> 8;
0x02B0	0xF000C03A  	MOVFF       _power_current+5, R0
0x02B4	0x6A01      	CLRF        R1 
0x02B6	0xFFC9C000  	MOVFF       R0, SSPBUF
;i2c.c,95 :: 		break;
0x02BA	0xD086      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,97 :: 		case 0xB0:
L_i2c_write_data_to_buffer33:
;i2c.c,98 :: 		SSPBUF = state;
0x02BC	0xFFC9C02A  	MOVFF       _state, SSPBUF
;i2c.c,99 :: 		break;
0x02C0	0xD083      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,100 :: 		case 0xB1:
L_i2c_write_data_to_buffer34:
;i2c.c,101 :: 		SSPBUF = watchdog_restart_default;
0x02C2	0xFFC9C026  	MOVFF       _watchdog_restart_default, SSPBUF
;i2c.c,102 :: 		break;
0x02C6	0xD080      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,103 :: 		case 0xB2:
L_i2c_write_data_to_buffer35:
;i2c.c,104 :: 		SSPBUF = ILS;
0x02C8	0x0E00      	MOVLW       0
0x02CA	0xB480      	BTFSC       PORTA, 2 
0x02CC	0x0E01      	MOVLW       1
0x02CE	0x6EC9      	MOVWF       SSPBUF 
;i2c.c,105 :: 		break;
0x02D0	0xD07B      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,107 :: 		case 0xC0:
L_i2c_write_data_to_buffer36:
;i2c.c,108 :: 		SSPBUF = CODE_VERSION;
0x02D2	0x0E01      	MOVLW       1
0x02D4	0x6EC9      	MOVWF       SSPBUF 
;i2c.c,109 :: 		break;
0x02D6	0xD078      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,110 :: 		case 0xC1:
L_i2c_write_data_to_buffer37:
;i2c.c,111 :: 		SSPBUF = is_init;
0x02D8	0xFFC9C041  	MOVFF       _is_init, SSPBUF
;i2c.c,112 :: 		break;
0x02DC	0xD075      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,113 :: 		default:
L_i2c_write_data_to_buffer38:
;i2c.c,114 :: 		SSPBUF = 0x00;
0x02DE	0x6AC9      	CLRF        SSPBUF 
;i2c.c,115 :: 		break;
0x02E0	0xD073      	BRA         L_i2c_write_data_to_buffer18
;i2c.c,116 :: 		}
L_i2c_write_data_to_buffer17:
0x02E2	0x0E00      	MOVLW       0
0x02E4	0x1804      	XORWF       R4, 0 
0x02E6	0xE102      	BNZ         L__i2c_write_data_to_buffer62
0x02E8	0x0E00      	MOVLW       0
0x02EA	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer62:
0x02EC	0xE0A8      	BZ          L_i2c_write_data_to_buffer19
0x02EE	0x0E00      	MOVLW       0
0x02F0	0x1804      	XORWF       R4, 0 
0x02F2	0xE102      	BNZ         L__i2c_write_data_to_buffer63
0x02F4	0x0E01      	MOVLW       1
0x02F6	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer63:
0x02F8	0xE0A5      	BZ          L_i2c_write_data_to_buffer20
0x02FA	0x0E00      	MOVLW       0
0x02FC	0x1804      	XORWF       R4, 0 
0x02FE	0xE102      	BNZ         L__i2c_write_data_to_buffer64
0x0300	0x0E02      	MOVLW       2
0x0302	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer64:
0x0304	0xE0A5      	BZ          L_i2c_write_data_to_buffer21
0x0306	0x0E00      	MOVLW       0
0x0308	0x1804      	XORWF       R4, 0 
0x030A	0xE102      	BNZ         L__i2c_write_data_to_buffer65
0x030C	0x0E03      	MOVLW       3
0x030E	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer65:
0x0310	0xE0A2      	BZ          L_i2c_write_data_to_buffer22
0x0312	0x0E00      	MOVLW       0
0x0314	0x1804      	XORWF       R4, 0 
0x0316	0xE102      	BNZ         L__i2c_write_data_to_buffer66
0x0318	0x0E04      	MOVLW       4
0x031A	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer66:
0x031C	0xE0A2      	BZ          L_i2c_write_data_to_buffer23
0x031E	0x0E00      	MOVLW       0
0x0320	0x1804      	XORWF       R4, 0 
0x0322	0xE102      	BNZ         L__i2c_write_data_to_buffer67
0x0324	0x0E05      	MOVLW       5
0x0326	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer67:
0x0328	0xE09F      	BZ          L_i2c_write_data_to_buffer24
0x032A	0x0E00      	MOVLW       0
0x032C	0x1804      	XORWF       R4, 0 
0x032E	0xE102      	BNZ         L__i2c_write_data_to_buffer68
0x0330	0x0E06      	MOVLW       6
0x0332	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer68:
0x0334	0xE09F      	BZ          L_i2c_write_data_to_buffer25
0x0336	0x0E00      	MOVLW       0
0x0338	0x1804      	XORWF       R4, 0 
0x033A	0xE102      	BNZ         L__i2c_write_data_to_buffer69
0x033C	0x0E07      	MOVLW       7
0x033E	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer69:
0x0340	0xE09C      	BZ          L_i2c_write_data_to_buffer26
0x0342	0x0E00      	MOVLW       0
0x0344	0x1804      	XORWF       R4, 0 
0x0346	0xE102      	BNZ         L__i2c_write_data_to_buffer70
0x0348	0x0E08      	MOVLW       8
0x034A	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer70:
0x034C	0xE09C      	BZ          L_i2c_write_data_to_buffer27
0x034E	0x0E00      	MOVLW       0
0x0350	0x1804      	XORWF       R4, 0 
0x0352	0xE102      	BNZ         L__i2c_write_data_to_buffer71
0x0354	0x0E09      	MOVLW       9
0x0356	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer71:
0x0358	0xE099      	BZ          L_i2c_write_data_to_buffer28
0x035A	0x0E00      	MOVLW       0
0x035C	0x1804      	XORWF       R4, 0 
0x035E	0xE102      	BNZ         L__i2c_write_data_to_buffer72
0x0360	0x0E0A      	MOVLW       10
0x0362	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer72:
0x0364	0xE099      	BZ          L_i2c_write_data_to_buffer29
0x0366	0x0E00      	MOVLW       0
0x0368	0x1804      	XORWF       R4, 0 
0x036A	0xE102      	BNZ         L__i2c_write_data_to_buffer73
0x036C	0x0E0B      	MOVLW       11
0x036E	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer73:
0x0370	0xE096      	BZ          L_i2c_write_data_to_buffer30
0x0372	0x0E00      	MOVLW       0
0x0374	0x1804      	XORWF       R4, 0 
0x0376	0xE102      	BNZ         L__i2c_write_data_to_buffer74
0x0378	0x0E0C      	MOVLW       12
0x037A	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer74:
0x037C	0xE096      	BZ          L_i2c_write_data_to_buffer31
0x037E	0x0E00      	MOVLW       0
0x0380	0x1804      	XORWF       R4, 0 
0x0382	0xE102      	BNZ         L__i2c_write_data_to_buffer75
0x0384	0x0E0D      	MOVLW       13
0x0386	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer75:
0x0388	0xE093      	BZ          L_i2c_write_data_to_buffer32
0x038A	0x0E00      	MOVLW       0
0x038C	0x1804      	XORWF       R4, 0 
0x038E	0xE102      	BNZ         L__i2c_write_data_to_buffer76
0x0390	0x0EB0      	MOVLW       176
0x0392	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer76:
0x0394	0xE093      	BZ          L_i2c_write_data_to_buffer33
0x0396	0x0E00      	MOVLW       0
0x0398	0x1804      	XORWF       R4, 0 
0x039A	0xE102      	BNZ         L__i2c_write_data_to_buffer77
0x039C	0x0EB1      	MOVLW       177
0x039E	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer77:
0x03A0	0xE090      	BZ          L_i2c_write_data_to_buffer34
0x03A2	0x0E00      	MOVLW       0
0x03A4	0x1804      	XORWF       R4, 0 
0x03A6	0xE102      	BNZ         L__i2c_write_data_to_buffer78
0x03A8	0x0EB2      	MOVLW       178
0x03AA	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer78:
0x03AC	0xE08D      	BZ          L_i2c_write_data_to_buffer35
0x03AE	0x0E00      	MOVLW       0
0x03B0	0x1804      	XORWF       R4, 0 
0x03B2	0xE102      	BNZ         L__i2c_write_data_to_buffer79
0x03B4	0x0EC0      	MOVLW       192
0x03B6	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer79:
0x03B8	0xE08C      	BZ          L_i2c_write_data_to_buffer36
0x03BA	0x0E00      	MOVLW       0
0x03BC	0x1804      	XORWF       R4, 0 
0x03BE	0xE102      	BNZ         L__i2c_write_data_to_buffer80
0x03C0	0x0EC1      	MOVLW       193
0x03C2	0x1803      	XORWF       R3, 0 
L__i2c_write_data_to_buffer80:
0x03C4	0xE089      	BZ          L_i2c_write_data_to_buffer37
0x03C6	0xD78B      	BRA         L_i2c_write_data_to_buffer38
L_i2c_write_data_to_buffer18:
;i2c.c,117 :: 		watchdog_restart = watchdog_restart_default;
0x03C8	0xF027C026  	MOVFF       _watchdog_restart_default, _watchdog_restart
;i2c.c,118 :: 		}
L_end_i2c_write_data_to_buffer:
0x03CC	0x0012      	RETURN      0
; end of _i2c_write_data_to_buffer
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x03CE	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x03D0	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x03D4	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x03D6	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x03D8	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x03DA	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x03DC	0x0012      	RETURN      0
; end of ___CC2DW
_measure_power:
;config.c,88 :: 		void measure_power(){
;config.c,89 :: 		battery_voltage[0] = ADC_Get_Sample(4);   // Get 10-bit results of AD conversion AN4 batterie 1
0x03DE	0x0E04      	MOVLW       4
0x03E0	0x6E56      	MOVWF       FARG_ADC_Get_Sample_channel 
0x03E2	0xDE21      	RCALL       _ADC_Get_Sample
0x03E4	0xF02CC000  	MOVFF       R0, _battery_voltage
0x03E8	0xF02DC001  	MOVFF       R1, _battery_voltage+1
;config.c,90 :: 		battery_voltage[1] = ADC_Get_Sample(5);   // Get 10-bit results of AD conversion AN5 batterie 2
0x03EC	0x0E05      	MOVLW       5
0x03EE	0x6E56      	MOVWF       FARG_ADC_Get_Sample_channel 
0x03F0	0xDE1A      	RCALL       _ADC_Get_Sample
0x03F2	0xF02EC000  	MOVFF       R0, _battery_voltage+2
0x03F6	0xF02FC001  	MOVFF       R1, _battery_voltage+3
;config.c,91 :: 		battery_voltage[2] = ADC_Get_Sample(6);   // Get 10-bit results of AD conversion AN6 batterie 3
0x03FA	0x0E06      	MOVLW       6
0x03FC	0x6E56      	MOVWF       FARG_ADC_Get_Sample_channel 
0x03FE	0xDE13      	RCALL       _ADC_Get_Sample
0x0400	0xF030C000  	MOVFF       R0, _battery_voltage+4
0x0404	0xF031C001  	MOVFF       R1, _battery_voltage+5
;config.c,92 :: 		battery_voltage[3] = ADC_Get_Sample(7);   // Get 10-bit results of AD conversion AN7 batterie 4
0x0408	0x0E07      	MOVLW       7
0x040A	0x6E56      	MOVWF       FARG_ADC_Get_Sample_channel 
0x040C	0xDE0C      	RCALL       _ADC_Get_Sample
0x040E	0xF032C000  	MOVFF       R0, _battery_voltage+6
0x0412	0xF033C001  	MOVFF       R1, _battery_voltage+7
;config.c,95 :: 		power_current[0] = ADC_Get_Sample(11);
0x0416	0x0E0B      	MOVLW       11
0x0418	0x6E56      	MOVWF       FARG_ADC_Get_Sample_channel 
0x041A	0xDE05      	RCALL       _ADC_Get_Sample
0x041C	0xF035C000  	MOVFF       R0, _power_current
0x0420	0xF036C001  	MOVFF       R1, _power_current+1
;config.c,96 :: 		power_current[1] = ADC_Get_Sample(8);
0x0424	0x0E08      	MOVLW       8
0x0426	0x6E56      	MOVWF       FARG_ADC_Get_Sample_channel 
0x0428	0xDDFE      	RCALL       _ADC_Get_Sample
0x042A	0xF037C000  	MOVFF       R0, _power_current+2
0x042E	0xF038C001  	MOVFF       R1, _power_current+3
;config.c,97 :: 		power_current[2] = ADC_Get_Sample(9);
0x0432	0x0E09      	MOVLW       9
0x0434	0x6E56      	MOVWF       FARG_ADC_Get_Sample_channel 
0x0436	0xDDF7      	RCALL       _ADC_Get_Sample
0x0438	0xF039C000  	MOVFF       R0, _power_current+4
0x043C	0xF03AC001  	MOVFF       R1, _power_current+5
;config.c,98 :: 		}
L_end_measure_power:
0x0440	0x0012      	RETURN      0
; end of _measure_power
_init_timer0:
;config.c,100 :: 		void init_timer0(){
;config.c,101 :: 		T0CON = 0x85; // TIMER0 ON (1 s)
0x0442	0x0E85      	MOVLW       133
0x0444	0x6ED5      	MOVWF       T0CON 
;config.c,102 :: 		TMR0H = TIMER0_CPT_H;
0x0446	0x0E0B      	MOVLW       11
0x0448	0x6ED7      	MOVWF       TMR0H 
;config.c,103 :: 		TMR0L = TIMER0_CPT_L;
0x044A	0x0EDC      	MOVLW       220
0x044C	0x6ED6      	MOVWF       TMR0L 
;config.c,104 :: 		TMR0IE_bit = 0;
0x044E	0x9AF2      	BCF         TMR0IE_bit, BitPos(TMR0IE_bit+0) 
;config.c,105 :: 		}
L_end_init_timer0:
0x0450	0x0012      	RETURN      0
; end of _init_timer0
_init_i2c:
;i2c.c,129 :: 		void init_i2c(const unsigned short address_i2c){
;i2c.c,132 :: 		TRISB4_bit = 1; // RB4 en entrée
0x0452	0x8893      	BSF         TRISB4_bit, BitPos(TRISB4_bit+0) 
;i2c.c,133 :: 		TRISB6_bit = 1; // RB6 en entrée
0x0454	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;i2c.c,136 :: 		PIE1.SSPIE = 1; // Synchronous Serial Port Interrupt Enable bit
0x0456	0x869D      	BSF         PIE1, 3 
;i2c.c,137 :: 		PIR1.SSPIF = 0; // Synchronous Serial Port (SSP) Interrupt Flag, I2C Slave
0x0458	0x969E      	BCF         PIR1, 3 
;i2c.c,139 :: 		PIR2.BCLIE = 1;
0x045A	0x86A1      	BSF         PIR2, 3 
;i2c.c,140 :: 		PIR2.BCLIF = 0;
0x045C	0x96A1      	BCF         PIR2, 3 
;i2c.c,143 :: 		SSPADD = (address_i2c << 1); // Address Register, Get address (7-1 bit). Lsb is read/write flag
0x045E	0xF000C055  	MOVFF       FARG_init_i2c_address_i2c, R0
0x0462	0x3600      	RLCF        R0, 1 
0x0464	0x9000      	BCF         R0, 0 
0x0466	0xFFC8C000  	MOVFF       R0, SSPADD
;i2c.c,144 :: 		SSPMSK = 0xFF; // A zero (‘0’) bit in the SSPMSK register has the effect of making
0x046A	0x0EFF      	MOVLW       255
0x046C	0x6E6F      	MOVWF       SSPMSK 
;i2c.c,148 :: 		SSPSTAT.SMP = 1; // Slew Rate Control bit
0x046E	0x8EC7      	BSF         SSPSTAT, 7 
;i2c.c,151 :: 		SSPSTAT.CKE = 1; // // SMBusTM Select bit (1 = Enable SMBus specific inputs)
0x0470	0x8CC7      	BSF         SSPSTAT, 6 
;i2c.c,154 :: 		SSPCON2 = 0x00;
0x0472	0x6AC5      	CLRF        SSPCON2 
;i2c.c,155 :: 		SSPCON2.GCEN = 0; // General Call Enable bit (0 = disabled)
0x0474	0x9EC5      	BCF         SSPCON2, 7 
;i2c.c,156 :: 		SSPCON2.SEN = 0; // Start Condition Enable/Stretch Enable bit (1 = enabled)
0x0476	0x90C5      	BCF         SSPCON2, 0 
;i2c.c,159 :: 		SSPCON1.WCOL = 0; // Write Collision Detect bit
0x0478	0x9EC6      	BCF         SSPCON1, 7 
;i2c.c,160 :: 		SSPCON1.SSPOV = 0; // Receive Overflow Indicator bit
0x047A	0x9CC6      	BCF         SSPCON1, 6 
;i2c.c,161 :: 		SSPCON1.CKP = 1; // SCK Release Control bit (1=Release clock)
0x047C	0x88C6      	BSF         SSPCON1, 4 
;i2c.c,162 :: 		SSPCON1.SSPM3 = 0b0; // I2C Slave mode, 7-bit address with Start and Stop bit interrupts enabled (1-> with S/P, 0 -> without)
0x047E	0x96C6      	BCF         SSPCON1, 3 
;i2c.c,163 :: 		SSPCON1.SSPM2 = 0b1; // I2C Slave mode, 7-bit address with Start and Stop bit interrupts enabled
0x0480	0x84C6      	BSF         SSPCON1, 2 
;i2c.c,164 :: 		SSPCON1.SSPM1 = 0b1; // I2C Slave mode, 7-bit address with Start and Stop bit interrupts enabled
0x0482	0x82C6      	BSF         SSPCON1, 1 
;i2c.c,165 :: 		SSPCON1.SSPM0 = 0b0; // I2C Slave mode, 7-bit address with Start and Stop bit interrupts enabled
0x0484	0x90C6      	BCF         SSPCON1, 0 
;i2c.c,168 :: 		SSPCON1.SSPEN = 1; // Synchronous Serial Port Enable bit
0x0486	0x8AC6      	BSF         SSPCON1, 5 
;i2c.c,169 :: 		}
L_end_init_i2c:
0x0488	0x0012      	RETURN      0
; end of _init_i2c
_init_io:
;config.c,56 :: 		void init_io(){
;config.c,59 :: 		ANSEL = 0b00001111;  // Set RC0,RC1,RC2,RC3 to analog (AN4,AN5,AN6,AN7)
0x048A	0x0E0F      	MOVLW       15
0x048C	0x6E7E      	MOVWF       ANSEL 
;config.c,60 :: 		ANSELH = 0b11110100; // Set RC6, RC7, RC5 to analog (AN8, AN9, AN11)
0x048E	0x0EF4      	MOVLW       244
0x0490	0x6E7F      	MOVWF       ANSELH 
;config.c,62 :: 		CM1CON0 = 0x00; // Not using the comparators
0x0492	0x6A6D      	CLRF        CM1CON0 
;config.c,63 :: 		CM2CON0 = 0x00;
0x0494	0x6A6B      	CLRF        CM2CON0 
;config.c,67 :: 		TRISA = 0xFF;
0x0496	0x0EFF      	MOVLW       255
0x0498	0x6E92      	MOVWF       TRISA 
;config.c,68 :: 		TRISA2_bit = 1; // INPUT (ILS)
0x049A	0x8492      	BSF         TRISA2_bit, BitPos(TRISA2_bit+0) 
;config.c,69 :: 		TRISA5_bit = 0; // OUTPUT (POWER)
0x049C	0x9A92      	BCF         TRISA5_bit, BitPos(TRISA5_bit+0) 
;config.c,71 :: 		INTCON2.RABPU = 0; // PORTA and PORTB Pull-up Enable bit
0x049E	0x9EF1      	BCF         INTCON2, 7 
;config.c,72 :: 		WPUA.WPUA2 = 1; // Pull-up enabled sur RA2
0x04A0	0x8477      	BSF         WPUA, 2 
;config.c,74 :: 		TRISB = 0xFF;
0x04A2	0x0EFF      	MOVLW       255
0x04A4	0x6E93      	MOVWF       TRISB 
;config.c,75 :: 		TRISB5_bit = 1; // RC5 input for AN11
0x04A6	0x8A93      	BSF         TRISB5_bit, BitPos(TRISB5_bit+0) 
;config.c,76 :: 		TRISB7_bit = 0; // OUTPUT (LED)
0x04A8	0x9E93      	BCF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;config.c,78 :: 		TRISC = 0xFF;
0x04AA	0x0EFF      	MOVLW       255
0x04AC	0x6E94      	MOVWF       TRISC 
;config.c,79 :: 		TRISC0_bit = 1; // RC0 input for AN4
0x04AE	0x8094      	BSF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;config.c,80 :: 		TRISC1_bit = 1; // RC1 input for AN5
0x04B0	0x8294      	BSF         TRISC1_bit, BitPos(TRISC1_bit+0) 
;config.c,81 :: 		TRISC2_bit = 1; // RC2 input for AN6
0x04B2	0x8494      	BSF         TRISC2_bit, BitPos(TRISC2_bit+0) 
;config.c,82 :: 		TRISC3_bit = 1; // RC3 input for AN7
0x04B4	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;config.c,84 :: 		TRISC6_bit = 1; // RC6 input for AN8
0x04B6	0x8C94      	BSF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;config.c,85 :: 		TRISC7_bit = 1; // RC7 input for AN9
0x04B8	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;config.c,86 :: 		}
L_end_init_io:
0x04BA	0x0012      	RETURN      0
; end of _init_io
_init_timer3:
;config.c,107 :: 		void init_timer3(){
;config.c,108 :: 		T3CON = 0x30;
0x04BC	0x0E30      	MOVLW       48
0x04BE	0x6EB1      	MOVWF       T3CON 
;config.c,109 :: 		TMR3IF_bit = 0;
0x04C0	0x92A1      	BCF         TMR3IF_bit, BitPos(TMR3IF_bit+0) 
;config.c,110 :: 		TMR3H = TIMER3_CPT_H;
0x04C2	0x0E3C      	MOVLW       60
0x04C4	0x6EB3      	MOVWF       TMR3H 
;config.c,111 :: 		TMR3L = TIMER3_CPT_L;
0x04C6	0x0EB0      	MOVLW       176
0x04C8	0x6EB2      	MOVWF       TMR3L 
;config.c,112 :: 		TMR3IE_bit = 0;
0x04CA	0x92A0      	BCF         TMR3IE_bit, BitPos(TMR3IE_bit+0) 
;config.c,113 :: 		}
L_end_init_timer3:
0x04CC	0x0012      	RETURN      0
; end of _init_timer3
_ADC_Init:
;__Lib_ADC_A_D.c,13 :: 		
;__Lib_ADC_A_D.c,14 :: 		
0x04CE	0x0E26      	MOVLW       _ADC_Get_Sample
0x04D0	0x6E50      	MOVWF       _ADC_Get_Sample_Ptr 
0x04D2	0x0E00      	MOVLW       hi_addr(_ADC_Get_Sample)
0x04D4	0x6E51      	MOVWF       _ADC_Get_Sample_Ptr+1 
0x04D6	0x0E56      	MOVLW       FARG_ADC_Get_Sample_channel
0x04D8	0x6E52      	MOVWF       _ADC_Get_Sample_Ptr+2 
0x04DA	0x0E00      	MOVLW       hi_addr(FARG_ADC_Get_Sample_channel)
0x04DC	0x6E53      	MOVWF       _ADC_Get_Sample_Ptr+3 
;__Lib_ADC_A_D.c,16 :: 		
0x04DE	0x6AC2      	CLRF        ADCON0 
;__Lib_ADC_A_D.c,17 :: 		
0x04E0	0x1C3B      	COMF        _vref_mask, 0 
0x04E2	0x6E00      	MOVWF       R0 
0x04E4	0x5000      	MOVF        R0, 0 
0x04E6	0x16C1      	ANDWF       ADCON1, 1 
;__Lib_ADC_A_D.c,18 :: 		
0x04E8	0x0E07      	MOVLW       7
0x04EA	0x12C0      	IORWF       ADCON2, 1 
;__Lib_ADC_A_D.c,19 :: 		
0x04EC	0x8EC0      	BSF         ADCON2, 7 
;__Lib_ADC_A_D.c,20 :: 		
0x04EE	0x80C2      	BSF         ADCON0, 0 
;__Lib_ADC_A_D.c,21 :: 		
L_end_ADC_Init:
0x04F0	0x0012      	RETURN      0
; end of _ADC_Init
_interrupt:
;main.c,132 :: 		void interrupt(){
0x04F2	0xF01FC000  	MOVFF       R0, 31
;main.c,137 :: 		if (TMR0IF_bit){
0x04F6	0xA4F2      	BTFSS       TMR0IF_bit, BitPos(TMR0IF_bit+0) 
0x04F8	0xD03E      	BRA         L_interrupt20
;main.c,140 :: 		if(state == SLEEP){
0x04FA	0x502A      	MOVF        _state, 0 
0x04FC	0x0A03      	XORLW       3
0x04FE	0xE112      	BNZ         L_interrupt21
;main.c,141 :: 		if(time_to_start[2]>0){
0x0500	0x5046      	MOVF        _time_to_start+2, 0 
0x0502	0x0800      	SUBLW       0
0x0504	0xE202      	BC          L_interrupt22
;main.c,142 :: 		time_to_start[2]--;
0x0506	0x0646      	DECF        _time_to_start+2, 1 
;main.c,143 :: 		}
0x0508	0xD00D      	BRA         L_interrupt23
L_interrupt22:
;main.c,145 :: 		if(time_to_start[1]>0){
0x050A	0x5045      	MOVF        _time_to_start+1, 0 
0x050C	0x0800      	SUBLW       0
0x050E	0xE204      	BC          L_interrupt24
;main.c,146 :: 		time_to_start[1]--;
0x0510	0x0645      	DECF        _time_to_start+1, 1 
;main.c,147 :: 		time_to_start[2]=59;
0x0512	0x0E3B      	MOVLW       59
0x0514	0x6E46      	MOVWF       _time_to_start+2 
;main.c,148 :: 		}
0x0516	0xD006      	BRA         L_interrupt25
L_interrupt24:
;main.c,150 :: 		if(time_to_start[0]>0){
0x0518	0x5044      	MOVF        _time_to_start, 0 
0x051A	0x0800      	SUBLW       0
0x051C	0xE203      	BC          L_interrupt26
;main.c,151 :: 		time_to_start[0]--;
0x051E	0x0644      	DECF        _time_to_start, 1 
;main.c,152 :: 		time_to_start[1]=59;
0x0520	0x0E3B      	MOVLW       59
0x0522	0x6E45      	MOVWF       _time_to_start+1 
;main.c,153 :: 		}
L_interrupt26:
;main.c,154 :: 		}
L_interrupt25:
;main.c,155 :: 		}
L_interrupt23:
;main.c,156 :: 		}
L_interrupt21:
;main.c,158 :: 		if(state == WAIT_TO_SLEEP){
0x0524	0x502A      	MOVF        _state, 0 
0x0526	0x0A02      	XORLW       2
0x0528	0xE104      	BNZ         L_interrupt27
;main.c,159 :: 		if(time_to_stop>0)
0x052A	0x5024      	MOVF        _time_to_stop, 0 
0x052C	0x0800      	SUBLW       0
0x052E	0xA0D8      	BTFSS       STATUS, 0 
;main.c,160 :: 		time_to_stop--;
0x0530	0x0624      	DECF        _time_to_stop, 1 
L_interrupt28:
;main.c,161 :: 		}
L_interrupt27:
;main.c,164 :: 		if(state == POWER_ON && watchdog_restart_default!=0){
0x0532	0x502A      	MOVF        _state, 0 
0x0534	0x0A01      	XORLW       1
0x0536	0xE119      	BNZ         L_interrupt31
0x0538	0x5026      	MOVF        _watchdog_restart_default, 0 
0x053A	0x0A00      	XORLW       0
0x053C	0xE016      	BZ          L_interrupt31
L__interrupt46:
;main.c,165 :: 		if(watchdog_cpt_sec>0)
0x053E	0x5043      	MOVF        _watchdog_cpt_sec, 0 
0x0540	0x0800      	SUBLW       0
0x0542	0xE202      	BC          L_interrupt32
;main.c,166 :: 		watchdog_cpt_sec--;
0x0544	0x0643      	DECF        _watchdog_cpt_sec, 1 
0x0546	0xD011      	BRA         L_interrupt33
L_interrupt32:
;main.c,168 :: 		watchdog_cpt_sec = watchdog_cpt_default;
0x0548	0xF043C03F  	MOVFF       _watchdog_cpt_default, _watchdog_cpt_sec
;main.c,170 :: 		if(watchdog_restart>0)
0x054C	0x5027      	MOVF        _watchdog_restart, 0 
0x054E	0x0800      	SUBLW       0
0x0550	0xE202      	BC          L_interrupt34
;main.c,171 :: 		watchdog_restart--;
0x0552	0x0627      	DECF        _watchdog_restart, 1 
0x0554	0xD00A      	BRA         L_interrupt35
L_interrupt34:
;main.c,174 :: 		default_time_to_start[0] = 0;
0x0556	0x6A21      	CLRF        _default_time_to_start 
;main.c,175 :: 		default_time_to_start[1] = 0;
0x0558	0x6A22      	CLRF        _default_time_to_start+1 
;main.c,176 :: 		default_time_to_start[2] = 2; // 2s
0x055A	0x0E02      	MOVLW       2
0x055C	0x6E23      	MOVWF       _default_time_to_start+2 
;main.c,177 :: 		time_to_stop = default_time_to_stop;
0x055E	0xF024C025  	MOVFF       _default_time_to_stop, _time_to_stop
;main.c,179 :: 		state = WAIT_TO_SLEEP;
0x0562	0x0E02      	MOVLW       2
0x0564	0x6E2A      	MOVWF       _state 
;main.c,180 :: 		watchdog_restart = watchdog_restart_default;
0x0566	0xF027C026  	MOVFF       _watchdog_restart_default, _watchdog_restart
;main.c,181 :: 		}
L_interrupt35:
;main.c,182 :: 		}
L_interrupt33:
;main.c,183 :: 		}
L_interrupt31:
;main.c,185 :: 		TMR0H = TIMER0_CPT_H;
0x056A	0x0E0B      	MOVLW       11
0x056C	0x6ED7      	MOVWF       TMR0H 
;main.c,186 :: 		TMR0L = TIMER0_CPT_L;
0x056E	0x0EDC      	MOVLW       220
0x0570	0x6ED6      	MOVWF       TMR0L 
;main.c,187 :: 		TMR0IF_bit = 0;
0x0572	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;main.c,188 :: 		}
0x0574	0xD01E      	BRA         L_interrupt36
L_interrupt20:
;main.c,191 :: 		else if (TMR3IF_bit){
0x0576	0xA2A1      	BTFSS       TMR3IF_bit, BitPos(TMR3IF_bit+0) 
0x0578	0xD01C      	BRA         L_interrupt37
;main.c,193 :: 		if(set_led_on == 1) // For ILS
0x057A	0x5028      	MOVF        _set_led_on, 0 
0x057C	0x0A01      	XORLW       1
0x057E	0xE102      	BNZ         L_interrupt38
;main.c,194 :: 		LED = 1;
0x0580	0x8E81      	BSF         PORTB, 7 
0x0582	0xD009      	BRA         L_interrupt39
L_interrupt38:
;main.c,196 :: 		if (cpt_led > 0){
0x0584	0x503E      	MOVF        _cpt_led, 0 
0x0586	0x0800      	SUBLW       0
0x0588	0xE203      	BC          L_interrupt40
;main.c,197 :: 		LED = 0;
0x058A	0x9E81      	BCF         PORTB, 7 
;main.c,198 :: 		cpt_led--;
0x058C	0x063E      	DECF        _cpt_led, 1 
;main.c,199 :: 		}
0x058E	0xD003      	BRA         L_interrupt41
L_interrupt40:
;main.c,201 :: 		LED = 1;
0x0590	0x8E81      	BSF         PORTB, 7 
;main.c,202 :: 		cpt_led=led_delay;
0x0592	0xF03EC047  	MOVFF       _led_delay, _cpt_led
;main.c,203 :: 		}
L_interrupt41:
;main.c,204 :: 		}
L_interrupt39:
;main.c,207 :: 		if(cpt_state_machine==0){
0x0596	0x5042      	MOVF        _cpt_state_machine, 0 
0x0598	0x0A00      	XORLW       0
0x059A	0xE105      	BNZ         L_interrupt42
;main.c,208 :: 		cpt_state_machine = CPT_STATE_MACHINE_DEFAULT;
0x059C	0x0E05      	MOVLW       5
0x059E	0x6E42      	MOVWF       _cpt_state_machine 
;main.c,209 :: 		step_state_machine = 1;
0x05A0	0x0E01      	MOVLW       1
0x05A2	0x6E40      	MOVWF       _step_state_machine 
;main.c,210 :: 		}
0x05A4	0xD001      	BRA         L_interrupt43
L_interrupt42:
;main.c,212 :: 		cpt_state_machine--;
0x05A6	0x0642      	DECF        _cpt_state_machine, 1 
L_interrupt43:
;main.c,214 :: 		TMR3H = TIMER3_CPT_H;
0x05A8	0x0E3C      	MOVLW       60
0x05AA	0x6EB3      	MOVWF       TMR3H 
;main.c,215 :: 		TMR3L = TIMER3_CPT_L;
0x05AC	0x0EB0      	MOVLW       176
0x05AE	0x6EB2      	MOVWF       TMR3L 
;main.c,216 :: 		TMR3IF_bit = 0;
0x05B0	0x92A1      	BCF         TMR3IF_bit, BitPos(TMR3IF_bit+0) 
;main.c,217 :: 		}
L_interrupt37:
L_interrupt36:
;main.c,218 :: 		}
L_end_interrupt:
L__interrupt49:
0x05B2	0xF000C01F  	MOVFF       31, R0
0x05B6	0x0011      	RETFIE      1
; end of _interrupt
_main:
0x05B8	0xF003ECDC  	CALL        1976, 0
;main.c,23 :: 		void main(){
;main.c,24 :: 		unsigned short k = 0;
0x05BC	0x6A54      	CLRF        main_k_L0 
;main.c,34 :: 		OSCCON = 0b11110010;   // 0=4xPLL OFF, 111=IRCF<2:0>=16Mhz  OSTS=0  SCS<1:0>10 1x = Internal oscillator block
0x05BE	0x0EF2      	MOVLW       242
0x05C0	0x6ED3      	MOVWF       OSCCON 
;main.c,36 :: 		asm CLRWDT;// Watchdog
0x05C2	0x0004      	CLRWDT
;main.c,37 :: 		SWDTEN_bit = 1; //armement du watchdog
0x05C4	0x80D1      	BSF         SWDTEN_bit, BitPos(SWDTEN_bit+0) 
;main.c,39 :: 		init_io(); // Initialize I/O
0x05C6	0xDF61      	RCALL       _init_io
;main.c,40 :: 		init_i2c(0x42); // Initialize I2C
0x05C8	0x0E42      	MOVLW       66
0x05CA	0x6E55      	MOVWF       FARG_init_i2c_address_i2c 
0x05CC	0xDF42      	RCALL       _init_i2c
;main.c,41 :: 		init_timer0(); // Initialize TIMER0 every 1 seconds
0x05CE	0xDF39      	RCALL       _init_timer0
;main.c,42 :: 		init_timer3(); // Initialize TIMER3 every 100ms
0x05D0	0xDF75      	RCALL       _init_timer3
;main.c,44 :: 		ADC_Init();
0x05D2	0xDF7D      	RCALL       _ADC_Init
;main.c,46 :: 		ALIM = 1; // sortie MOSFET de puissance, commande de l'alimentation
0x05D4	0x8A80      	BSF         PORTA, 5 
;main.c,47 :: 		LED = 0;
0x05D6	0x9E81      	BCF         PORTB, 7 
;main.c,49 :: 		INTCON3.INT1IP = 0; //INT1 External Interrupt Priority bit, INT0 always a high
0x05D8	0x9CF0      	BCF         INTCON3, 6 
;main.c,52 :: 		RCON.IPEN = 1;  //Enable priority levels on interrupts
0x05DA	0x8ED0      	BSF         RCON, 7 
;main.c,53 :: 		IPR1.SSPIP = 0; //Master Synchronous Serial Port Interrupt Priority bit (low priority = 0)
0x05DC	0x969F      	BCF         IPR1, 3 
;main.c,54 :: 		INTCON.GIEH = 1; //enable all high-priority interrupts
0x05DE	0x8EF2      	BSF         INTCON, 7 
;main.c,55 :: 		INTCON.GIEL = 1; //enable all low-priority interrupts
0x05E0	0x8CF2      	BSF         INTCON, 6 
;main.c,57 :: 		INTCON.GIE = 1; // Global Interrupt Enable bit
0x05E2	0x8EF2      	BSF         INTCON, 7 
;main.c,58 :: 		INTCON.PEIE = 1; // Peripheral Interrupt Enable bit
0x05E4	0x8CF2      	BSF         INTCON, 6 
;main.c,60 :: 		TMR0IE_bit = 1;  //Enable TIMER0
0x05E6	0x8AF2      	BSF         TMR0IE_bit, BitPos(TMR0IE_bit+0) 
;main.c,61 :: 		TMR0ON_bit = 1; // Start TIMER1
0x05E8	0x8ED5      	BSF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;main.c,63 :: 		TMR3IE_bit = 1;  //Enable TIMER3
0x05EA	0x82A0      	BSF         TMR3IE_bit, BitPos(TMR3IE_bit+0) 
;main.c,64 :: 		TMR3ON_bit = 1; // Start TIMER3
0x05EC	0x80B1      	BSF         TMR3ON_bit, BitPos(TMR3ON_bit+0) 
;main.c,66 :: 		is_init = 1;
0x05EE	0x0E01      	MOVLW       1
0x05F0	0x6E41      	MOVWF       _is_init 
;main.c,68 :: 		while(1){
L_main0:
;main.c,69 :: 		asm CLRWDT;
0x05F2	0x0004      	CLRWDT
;main.c,71 :: 		if(step_state_machine==1){
0x05F4	0x5040      	MOVF        _step_state_machine, 0 
0x05F6	0x0A01      	XORLW       1
0x05F8	0xE15A      	BNZ         L_main2
;main.c,72 :: 		step_state_machine=0;
0x05FA	0x6A40      	CLRF        _step_state_machine 
;main.c,73 :: 		measure_power();
0x05FC	0xDEF0      	RCALL       _measure_power
;main.c,75 :: 		switch (state){
0x05FE	0xD04A      	BRA         L_main3
;main.c,76 :: 		case IDLE: // Idle state
L_main5:
;main.c,77 :: 		ALIM = 0;
0x0600	0x9A80      	BCF         PORTA, 5 
;main.c,78 :: 		led_delay = 50;
0x0602	0x0E32      	MOVLW       50
0x0604	0x6E47      	MOVWF       _led_delay 
;main.c,79 :: 		watchdog_restart = watchdog_restart_default;
0x0606	0xF027C026  	MOVFF       _watchdog_restart_default, _watchdog_restart
;main.c,81 :: 		ils_analysis(POWER_ON);
0x060A	0x0E01      	MOVLW       1
0x060C	0x6E55      	MOVWF       FARG_ils_analysis_new_state 
0x060E	0xDDF8      	RCALL       _ils_analysis
;main.c,82 :: 		break;
0x0610	0xD04E      	BRA         L_main4
;main.c,84 :: 		case POWER_ON:
L_main6:
;main.c,85 :: 		ALIM = 1;
0x0612	0x8A80      	BSF         PORTA, 5 
;main.c,89 :: 		led_delay = 20; // 2sec
0x0614	0x0E14      	MOVLW       20
0x0616	0x6E47      	MOVWF       _led_delay 
;main.c,91 :: 		ils_analysis(IDLE);
0x0618	0x6A55      	CLRF        FARG_ils_analysis_new_state 
0x061A	0xDDF2      	RCALL       _ils_analysis
;main.c,92 :: 		break;
0x061C	0xD048      	BRA         L_main4
;main.c,94 :: 		case WAIT_TO_SLEEP:
L_main7:
;main.c,96 :: 		ALIM = 1;
0x061E	0x8A80      	BSF         PORTA, 5 
;main.c,97 :: 		led_delay = 1;
0x0620	0x0E01      	MOVLW       1
0x0622	0x6E47      	MOVWF       _led_delay 
;main.c,98 :: 		if(time_to_stop==0){
0x0624	0x5024      	MOVF        _time_to_stop, 0 
0x0626	0x0A00      	XORLW       0
0x0628	0xE11C      	BNZ         L_main8
;main.c,99 :: 		for(k=0; k<3; k++)
0x062A	0x6A54      	CLRF        main_k_L0 
L_main9:
0x062C	0x0E03      	MOVLW       3
0x062E	0x5C54      	SUBWF       main_k_L0, 0 
0x0630	0xE214      	BC          L_main10
;main.c,100 :: 		time_to_start[k] = default_time_to_start[k];
0x0632	0x0E44      	MOVLW       _time_to_start
0x0634	0x6EE1      	MOVWF       FSR1L 
0x0636	0x0E00      	MOVLW       hi_addr(_time_to_start)
0x0638	0x6EE2      	MOVWF       FSR1L+1 
0x063A	0x5054      	MOVF        main_k_L0, 0 
0x063C	0x26E1      	ADDWF       FSR1L, 1 
0x063E	0xB0D8      	BTFSC       STATUS, 0 
0x0640	0x2AE2      	INCF        FSR1L+1, 1 
0x0642	0x0E21      	MOVLW       _default_time_to_start
0x0644	0x6EE9      	MOVWF       FSR0L 
0x0646	0x0E00      	MOVLW       hi_addr(_default_time_to_start)
0x0648	0x6EEA      	MOVWF       FSR0L+1 
0x064A	0x5054      	MOVF        main_k_L0, 0 
0x064C	0x26E9      	ADDWF       FSR0L, 1 
0x064E	0xB0D8      	BTFSC       STATUS, 0 
0x0650	0x2AEA      	INCF        FSR0L+1, 1 
0x0652	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;main.c,99 :: 		for(k=0; k<3; k++)
0x0656	0x2A54      	INCF        main_k_L0, 1 
;main.c,100 :: 		time_to_start[k] = default_time_to_start[k];
0x0658	0xD7E9      	BRA         L_main9
L_main10:
;main.c,101 :: 		state = SLEEP;
0x065A	0x0E03      	MOVLW       3
0x065C	0x6E2A      	MOVWF       _state 
;main.c,102 :: 		time_to_stop = default_time_to_stop;
0x065E	0xF024C025  	MOVFF       _default_time_to_stop, _time_to_stop
;main.c,103 :: 		}
L_main8:
;main.c,104 :: 		ils_analysis(POWER_ON);
0x0662	0x0E01      	MOVLW       1
0x0664	0x6E55      	MOVWF       FARG_ils_analysis_new_state 
0x0666	0xDDCC      	RCALL       _ils_analysis
;main.c,105 :: 		break;
0x0668	0xD022      	BRA         L_main4
;main.c,107 :: 		case SLEEP:
L_main12:
;main.c,108 :: 		ALIM = 0;
0x066A	0x9A80      	BCF         PORTA, 5 
;main.c,109 :: 		led_delay = 200; // 20 sec
0x066C	0x0EC8      	MOVLW       200
0x066E	0x6E47      	MOVWF       _led_delay 
;main.c,110 :: 		if(time_to_start[0] == 0 && time_to_start[1] == 0 && time_to_start[2] == 0){
0x0670	0x5044      	MOVF        _time_to_start, 0 
0x0672	0x0A00      	XORLW       0
0x0674	0xE108      	BNZ         L_main15
0x0676	0x5045      	MOVF        _time_to_start+1, 0 
0x0678	0x0A00      	XORLW       0
0x067A	0xE105      	BNZ         L_main15
0x067C	0x5046      	MOVF        _time_to_start+2, 0 
0x067E	0x0A00      	XORLW       0
0x0680	0xE102      	BNZ         L_main15
L__main45:
;main.c,111 :: 		state = POWER_ON;
0x0682	0x0E01      	MOVLW       1
0x0684	0x6E2A      	MOVWF       _state 
;main.c,112 :: 		}
L_main15:
;main.c,113 :: 		ils_analysis(POWER_ON);
0x0686	0x0E01      	MOVLW       1
0x0688	0x6E55      	MOVWF       FARG_ils_analysis_new_state 
0x068A	0xDDBA      	RCALL       _ils_analysis
;main.c,114 :: 		break;
0x068C	0xD010      	BRA         L_main4
;main.c,116 :: 		default:
L_main16:
;main.c,117 :: 		state = POWER_ON;
0x068E	0x0E01      	MOVLW       1
0x0690	0x6E2A      	MOVWF       _state 
;main.c,118 :: 		break;
0x0692	0xD00D      	BRA         L_main4
;main.c,119 :: 		}
L_main3:
0x0694	0x502A      	MOVF        _state, 0 
0x0696	0x0A00      	XORLW       0
0x0698	0xE0B3      	BZ          L_main5
0x069A	0x502A      	MOVF        _state, 0 
0x069C	0x0A01      	XORLW       1
0x069E	0xE0B9      	BZ          L_main6
0x06A0	0x502A      	MOVF        _state, 0 
0x06A2	0x0A02      	XORLW       2
0x06A4	0xE0BC      	BZ          L_main7
0x06A6	0x502A      	MOVF        _state, 0 
0x06A8	0x0A03      	XORLW       3
0x06AA	0xE0DF      	BZ          L_main12
0x06AC	0xD7F0      	BRA         L_main16
L_main4:
;main.c,120 :: 		}
L_main2:
;main.c,122 :: 		if(nb_rx_octet>1 && SSPSTAT.P == 1){
0x06AE	0x5034      	MOVF        _nb_rx_octet, 0 
0x06B0	0x0801      	SUBLW       1
0x06B2	0xE204      	BC          L_main19
0x06B4	0xA8C7      	BTFSS       SSPSTAT, 4 
0x06B6	0xD002      	BRA         L_main19
L__main44:
;main.c,123 :: 		i2c_read_data_from_buffer();
0x06B8	0xDCCD      	RCALL       _i2c_read_data_from_buffer
;main.c,124 :: 		nb_rx_octet = 0;
0x06BA	0x6A34      	CLRF        _nb_rx_octet 
;main.c,125 :: 		}
L_main19:
;main.c,126 :: 		}
0x06BC	0xD79A      	BRA         L_main0
;main.c,127 :: 		}
L_end_main:
0x06BE	0xD7FF      	BRA         $+0
; end of _main
_interrupt_low:
0x06C0	0xF01CC000  	MOVFF       R0, 28
0x06C4	0xF01BC001  	MOVFF       R1, 27
0x06C8	0xF01AC002  	MOVFF       R2, 26
0x06CC	0xF019C003  	MOVFF       R3, 25
0x06D0	0xF018C004  	MOVFF       R4, 24
0x06D4	0xF01DCFE1  	MOVFF       FSR1L, 29
0x06D8	0xF01ECFE2  	MOVFF       FSR1H, 30
0x06DC	0x6E15      	MOVWF       ___Low_saveWREG 
0x06DE	0xF016CFD8  	MOVFF       STATUS, ___Low_saveSTATUS
0x06E2	0xF017CFE0  	MOVFF       BSR, ___Low_saveBSR
;i2c.c,171 :: 		void interrupt_low(){
;i2c.c,172 :: 		unsigned char state = 0;
0x06E6	0x6A57      	CLRF        interrupt_low_state_L0 
;i2c.c,174 :: 		if (PIR1.SSPIF){  // I2C Interrupt
0x06E8	0xA69E      	BTFSS       PIR1, 3 
0x06EA	0xD03D      	BRA         L_interrupt_low42
;i2c.c,176 :: 		if(SSPSTAT.S){
0x06EC	0xA6C7      	BTFSS       SSPSTAT, 3 
0x06EE	0xD039      	BRA         L_interrupt_low43
;i2c.c,177 :: 		state  = SSPSTAT & MASTER_MASK;
0x06F0	0x0E25      	MOVLW       37
0x06F2	0x14C7      	ANDWF       SSPSTAT, 0 
0x06F4	0x6E57      	MOVWF       interrupt_low_state_L0 
;i2c.c,179 :: 		switch (state){
0x06F6	0xD026      	BRA         L_interrupt_low44
;i2c.c,180 :: 		case MASTER_READ_ADD:
L_interrupt_low46:
;i2c.c,181 :: 		case MASTER_READ_ADD2:
L_interrupt_low47:
;i2c.c,182 :: 		nb_tx_octet = 0;
0x06F8	0x6A3D      	CLRF        _nb_tx_octet 
;i2c.c,183 :: 		tmp_rx = SSPBUF;
0x06FA	0xF03CCFC9  	MOVFF       SSPBUF, _tmp_rx
;i2c.c,186 :: 		case MASTER_READ_DATA:
L_interrupt_low48:
;i2c.c,187 :: 		i2c_write_data_to_buffer(nb_tx_octet);
0x06FE	0xF058C03D  	MOVFF       _nb_tx_octet, FARG_i2c_write_data_to_buffer_nb_tx_octet
0x0702	0xDD96      	RCALL       _i2c_write_data_to_buffer
;i2c.c,188 :: 		nb_tx_octet++;
0x0704	0x503D      	MOVF        _nb_tx_octet, 0 
0x0706	0x0F01      	ADDLW       1
0x0708	0x6E00      	MOVWF       R0 
0x070A	0xF03DC000  	MOVFF       R0, _nb_tx_octet
;i2c.c,189 :: 		break;
0x070E	0xD029      	BRA         L_interrupt_low45
;i2c.c,191 :: 		case MASTER_WRITE_ADD:
L_interrupt_low49:
;i2c.c,192 :: 		nb_rx_octet = 0;
0x0710	0x6A34      	CLRF        _nb_rx_octet 
;i2c.c,193 :: 		tmp_rx = SSPBUF;
0x0712	0xF03CCFC9  	MOVFF       SSPBUF, _tmp_rx
;i2c.c,194 :: 		break;
0x0716	0xD025      	BRA         L_interrupt_low45
;i2c.c,196 :: 		case MASTER_WRITE_DATA:
L_interrupt_low50:
;i2c.c,197 :: 		if(nb_rx_octet < SIZE_RX_BUFFER){
0x0718	0x0E08      	MOVLW       8
0x071A	0x5C34      	SUBWF       _nb_rx_octet, 0 
0x071C	0xE210      	BC          L_interrupt_low51
;i2c.c,198 :: 		rxbuffer_tab[nb_rx_octet] = SSPBUF;
0x071E	0x0E48      	MOVLW       _rxbuffer_tab
0x0720	0x6EE1      	MOVWF       FSR1L 
0x0722	0x0E00      	MOVLW       hi_addr(_rxbuffer_tab)
0x0724	0x6EE2      	MOVWF       FSR1L+1 
0x0726	0x5034      	MOVF        _nb_rx_octet, 0 
0x0728	0x26E1      	ADDWF       FSR1L, 1 
0x072A	0xB0D8      	BTFSC       STATUS, 0 
0x072C	0x2AE2      	INCF        FSR1L+1, 1 
0x072E	0xFFE6CFC9  	MOVFF       SSPBUF, POSTINC1
;i2c.c,199 :: 		nb_rx_octet++;
0x0732	0x5034      	MOVF        _nb_rx_octet, 0 
0x0734	0x0F01      	ADDLW       1
0x0736	0x6E00      	MOVWF       R0 
0x0738	0xF034C000  	MOVFF       R0, _nb_rx_octet
;i2c.c,200 :: 		}
0x073C	0xD002      	BRA         L_interrupt_low52
L_interrupt_low51:
;i2c.c,202 :: 		tmp_rx = SSPBUF;
0x073E	0xF03CCFC9  	MOVFF       SSPBUF, _tmp_rx
L_interrupt_low52:
;i2c.c,203 :: 		break;
0x0742	0xD00F      	BRA         L_interrupt_low45
;i2c.c,204 :: 		}
L_interrupt_low44:
0x0744	0x5057      	MOVF        interrupt_low_state_L0, 0 
0x0746	0x0A04      	XORLW       4
0x0748	0xE0D7      	BZ          L_interrupt_low46
0x074A	0x5057      	MOVF        interrupt_low_state_L0, 0 
0x074C	0x0A05      	XORLW       5
0x074E	0xE0D4      	BZ          L_interrupt_low47
0x0750	0x5057      	MOVF        interrupt_low_state_L0, 0 
0x0752	0x0A24      	XORLW       36
0x0754	0xE0D4      	BZ          L_interrupt_low48
0x0756	0x5057      	MOVF        interrupt_low_state_L0, 0 
0x0758	0x0A01      	XORLW       1
0x075A	0xE0DA      	BZ          L_interrupt_low49
0x075C	0x5057      	MOVF        interrupt_low_state_L0, 0 
0x075E	0x0A21      	XORLW       33
0x0760	0xE0DB      	BZ          L_interrupt_low50
L_interrupt_low45:
;i2c.c,205 :: 		}
L_interrupt_low43:
;i2c.c,207 :: 		SSPCON1.CKP = 1;
0x0762	0x88C6      	BSF         SSPCON1, 4 
;i2c.c,208 :: 		PIR1.SSPIF = 0; // reset SSP interrupt flag
0x0764	0x969E      	BCF         PIR1, 3 
;i2c.c,209 :: 		}
L_interrupt_low42:
;i2c.c,210 :: 		}
L_end_interrupt_low:
L__interrupt_low84:
0x0766	0x5017      	MOVF        ___Low_saveBSR, 0 
0x0768	0x6EE0      	MOVWF       BSR 
0x076A	0x5016      	MOVF        ___Low_saveSTATUS, 0 
0x076C	0x6ED8      	MOVWF       STATUS 
0x076E	0x3A15      	SWAPF       ___Low_saveWREG, 1 
0x0770	0x3815      	SWAPF       ___Low_saveWREG, 0 
0x0772	0xF000C01C  	MOVFF       28, R0
0x0776	0xF001C01B  	MOVFF       27, R1
0x077A	0xF002C01A  	MOVFF       26, R2
0x077E	0xF003C019  	MOVFF       25, R3
0x0782	0xF004C018  	MOVFF       24, R4
0x0786	0xFFE1C01D  	MOVFF       29, FSR1L
0x078A	0xFFE2C01E  	MOVFF       30, FSR1H
0x078E	0x0010      	RETFIE      0
; end of _interrupt_low
0x07B8	0xF020EE10  	LFSR        1, 32
0x07BC	0x0E28      	MOVLW       40
0x07BE	0x6E00      	MOVWF       R0 
0x07C0	0x0E01      	MOVLW       1
0x07C2	0x6E01      	MOVWF       R1 
0x07C4	0x0E90      	MOVLW       144
0x07C6	0x6EF6      	MOVWF       4086 
0x07C8	0x0E07      	MOVLW       7
0x07CA	0x6EF7      	MOVWF       TBLPTRH 
0x07CC	0x0E00      	MOVLW       0
0x07CE	0x6EF8      	MOVWF       TBLPTRU 
0x07D0	0xF001ECE7  	CALL        974, 0
0x07D4	0x0012      	RETURN      0
;config.c,0 :: ?ICS_start_time_to_stop
0x0790	0x00 ;?ICS_start_time_to_stop+0
; end of ?ICS_start_time_to_stop
;config.c,0 :: ?ICS_default_time_to_start
0x0791	0x0000 ;?ICS_default_time_to_start+0
0x0793	0x05 ;?ICS_default_time_to_start+2
; end of ?ICS_default_time_to_start
;config.c,0 :: ?ICS_time_to_stop
0x0794	0x3C ;?ICS_time_to_stop+0
; end of ?ICS_time_to_stop
;config.c,0 :: ?ICS_default_time_to_stop
0x0795	0x3C ;?ICS_default_time_to_stop+0
; end of ?ICS_default_time_to_stop
;config.c,0 :: ?ICS_watchdog_restart_default
0x0796	0x3C ;?ICS_watchdog_restart_default+0
; end of ?ICS_watchdog_restart_default
;config.c,0 :: ?ICS_watchdog_restart
0x0797	0x3C ;?ICS_watchdog_restart+0
; end of ?ICS_watchdog_restart
;config.c,0 :: ?ICS_set_led_on
0x0798	0x00 ;?ICS_set_led_on+0
; end of ?ICS_set_led_on
;config.c,0 :: ?ICS_ils_cpt
0x0799	0x04 ;?ICS_ils_cpt+0
; end of ?ICS_ils_cpt
;config.c,0 :: ?ICS_state
0x079A	0x01 ;?ICS_state+0
; end of ?ICS_state
;config.c,0 :: ?ICS_ils_removed
0x079B	0x01 ;?ICS_ils_removed+0
; end of ?ICS_ils_removed
;config.c,0 :: ?ICS_battery_voltage
0x079C	0x0000 ;?ICS_battery_voltage+0
0x079E	0x0000 ;?ICS_battery_voltage+2
0x07A0	0x0000 ;?ICS_battery_voltage+4
0x07A2	0x0000 ;?ICS_battery_voltage+6
; end of ?ICS_battery_voltage
;i2c.c,0 :: ?ICS_nb_rx_octet
0x07A4	0x00 ;?ICS_nb_rx_octet+0
; end of ?ICS_nb_rx_octet
;config.c,0 :: ?ICS_power_current
0x07A5	0x0000 ;?ICS_power_current+0
0x07A7	0x0000 ;?ICS_power_current+2
0x07A9	0x0000 ;?ICS_power_current+4
; end of ?ICS_power_current
;__Lib_ADC_A_D.c,0 :: ?ICS_vref_mask
0x07AB	0x30 ;?ICS_vref_mask+0
; end of ?ICS_vref_mask
;i2c.c,0 :: ?ICS_tmp_rx
0x07AC	0x00 ;?ICS_tmp_rx+0
; end of ?ICS_tmp_rx
;i2c.c,0 :: ?ICS_nb_tx_octet
0x07AD	0x00 ;?ICS_nb_tx_octet+0
; end of ?ICS_nb_tx_octet
;config.c,0 :: ?ICS_cpt_led
0x07AE	0x64 ;?ICS_cpt_led+0
; end of ?ICS_cpt_led
;config.c,0 :: ?ICS_watchdog_cpt_default
0x07AF	0x3B ;?ICS_watchdog_cpt_default+0
; end of ?ICS_watchdog_cpt_default
;config.c,0 :: ?ICS_step_state_machine
0x07B0	0x00 ;?ICS_step_state_machine+0
; end of ?ICS_step_state_machine
;config.c,0 :: ?ICS_is_init
0x07B1	0x00 ;?ICS_is_init+0
; end of ?ICS_is_init
;config.c,0 :: ?ICS_cpt_state_machine
0x07B2	0x05 ;?ICS_cpt_state_machine+0
; end of ?ICS_cpt_state_machine
;config.c,0 :: ?ICS_watchdog_cpt_sec
0x07B3	0x3B ;?ICS_watchdog_cpt_sec+0
; end of ?ICS_watchdog_cpt_sec
;config.c,0 :: ?ICS_time_to_start
0x07B4	0x0000 ;?ICS_time_to_start+0
0x07B6	0x05 ;?ICS_time_to_start+2
; end of ?ICS_time_to_start
;config.c,0 :: ?ICS_led_delay
0x07B7	0x64 ;?ICS_led_delay+0
; end of ?ICS_led_delay
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [10]    _Delay_22us
0x0026      [46]    _ADC_Get_Sample
0x0054     [428]    _i2c_read_data_from_buffer
0x0200      [48]    _ils_analysis
0x0230     [414]    _i2c_write_data_to_buffer
0x03CE      [16]    ___CC2DW
0x03DE     [100]    _measure_power
0x0442      [16]    _init_timer0
0x0452      [56]    _init_i2c
0x048A      [50]    _init_io
0x04BC      [18]    _init_timer3
0x04CE      [36]    _ADC_Init
0x04F2     [198]    _interrupt
0x05B8     [264]    _main
0x06C0     [208]    _interrupt_low
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    ___Low_saveWREG
0x0016       [1]    ___Low_saveSTATUS
0x0017       [1]    ___Low_saveBSR
0x0020       [1]    _start_time_to_stop
0x0021       [3]    _default_time_to_start
0x0024       [1]    _time_to_stop
0x0025       [1]    _default_time_to_stop
0x0026       [1]    _watchdog_restart_default
0x0027       [1]    _watchdog_restart
0x0028       [1]    _set_led_on
0x0029       [1]    _ils_cpt
0x002A       [1]    _state
0x002B       [1]    _ils_removed
0x002C       [8]    _battery_voltage
0x0034       [1]    _nb_rx_octet
0x0035       [6]    _power_current
0x003B       [1]    _vref_mask
0x003C       [1]    _tmp_rx
0x003D       [1]    _nb_tx_octet
0x003E       [1]    _cpt_led
0x003F       [1]    _watchdog_cpt_default
0x0040       [1]    _step_state_machine
0x0041       [1]    _is_init
0x0042       [1]    _cpt_state_machine
0x0043       [1]    _watchdog_cpt_sec
0x0044       [3]    _time_to_start
0x0047       [1]    _led_delay
0x0048       [8]    _rxbuffer_tab
0x0050       [4]    _ADC_Get_Sample_Ptr
0x0054       [1]    main_k_L0
0x0055       [1]    FARG_init_i2c_address_i2c
0x0055       [1]    i2c_read_data_from_buffer_i_L0
0x0055       [1]    FARG_ils_analysis_new_state
0x0056       [1]    FARG_ADC_Get_Sample_channel
0x0057       [1]    interrupt_low_state_L0
0x0058       [1]    FARG_i2c_write_data_to_buffer_nb_tx_octet
0x0F6B       [1]    CM2CON0
0x0F6D       [1]    CM1CON0
0x0F6F       [1]    SSPMSK
0x0F77       [1]    WPUA
0x0F7E       [1]    ANSEL
0x0F7F       [1]    ANSELH
0x0F80       [0]    ILS
0x0F80       [1]    PORTA
0x0F80       [0]    ILS
0x0F80       [0]    ALIM
0x0F81       [1]    PORTB
0x0F81       [0]    LED
0x0F92       [0]    TRISA5_bit
0x0F92       [0]    TRISA2_bit
0x0F92       [1]    TRISA
0x0F93       [0]    TRISB6_bit
0x0F93       [0]    TRISB4_bit
0x0F93       [1]    TRISB
0x0F93       [0]    TRISB7_bit
0x0F93       [0]    TRISB5_bit
0x0F94       [0]    TRISC2_bit
0x0F94       [0]    TRISC1_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC0_bit
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC3_bit
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0F9F       [1]    IPR1
0x0FA0       [0]    TMR3IE_bit
0x0FA1       [1]    PIR2
0x0FA1       [0]    TMR3IF_bit
0x0FB1       [1]    T3CON
0x0FB1       [0]    TMR3ON_bit
0x0FB2       [1]    TMR3L
0x0FB3       [1]    TMR3H
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FC3       [1]    ADRESL
0x0FC4       [1]    ADRESH
0x0FC5       [1]    SSPCON2
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC8       [1]    SSPADD
0x0FC9       [1]    SSPBUF
0x0FD0       [1]    RCON
0x0FD1       [0]    SWDTEN_bit
0x0FD3       [1]    OSCCON
0x0FD5       [1]    T0CON
0x0FD5       [0]    TMR0ON_bit
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF0       [1]    INTCON3
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF2       [0]    TMR0IE_bit
0x0FF2       [0]    TMR0IF_bit
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0790       [1]    ?ICS_start_time_to_stop
0x0791       [3]    ?ICS_default_time_to_start
0x0794       [1]    ?ICS_time_to_stop
0x0795       [1]    ?ICS_default_time_to_stop
0x0796       [1]    ?ICS_watchdog_restart_default
0x0797       [1]    ?ICS_watchdog_restart
0x0798       [1]    ?ICS_set_led_on
0x0799       [1]    ?ICS_ils_cpt
0x079A       [1]    ?ICS_state
0x079B       [1]    ?ICS_ils_removed
0x079C       [8]    ?ICS_battery_voltage
0x07A4       [1]    ?ICS_nb_rx_octet
0x07A5       [6]    ?ICS_power_current
0x07AB       [1]    ?ICS_vref_mask
0x07AC       [1]    ?ICS_tmp_rx
0x07AD       [1]    ?ICS_nb_tx_octet
0x07AE       [1]    ?ICS_cpt_led
0x07AF       [1]    ?ICS_watchdog_cpt_default
0x07B0       [1]    ?ICS_step_state_machine
0x07B1       [1]    ?ICS_is_init
0x07B2       [1]    ?ICS_cpt_state_machine
0x07B3       [1]    ?ICS_watchdog_cpt_sec
0x07B4       [3]    ?ICS_time_to_start
0x07B7       [1]    ?ICS_led_delay
